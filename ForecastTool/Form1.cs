using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;

using Proto;
using Forecast;

namespace ForecastTool
{
    public partial class Form1 : Form
    {

        private static int[] precisionList = {10, 100, 1000, 10000};
        private static int[] outputResolutionList = { 1, 3, 10, 20, 30, 50, 100, 1000 };

        private string scriptFileName = "";

        private const string versionString = "0.1";

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            populatePrecisionComboBox();
            this.Name = "Forecast v" + versionString;
        }

        private void populatePrecisionComboBox()
        {
            populateComboBox(comboBox_precision, precisionList);
            comboBox_precision.SelectedIndex = 2;
            populateComboBox(comboBox_outputResolution, outputResolutionList);
            comboBox_outputResolution.SelectedIndex = 3;
        }

        private static void populateComboBox(ComboBox cb, int[] valueList)
        {
            foreach (int i in valueList)
                cb.Items.Add("" + i);
        }

        private void button_selectSource_Click(object sender, EventArgs e)
        {
            if (openFileDialog_selectSource.ShowDialog() == DialogResult.OK)
            {
                scriptFileName = openFileDialog_selectSource.FileName;
            }
        }

        private void button_forecast_Click(object sender, EventArgs e)
        {
            string filePath = scriptFileName;
            CSV csv;

            try
            {
                csv = readCsvFile(filePath);
            }
            catch (Exception exception)
            {
                MessageBox.Show("Failed to read source file: " + exception.Message);
                return;
            }

            int precision = precisionList[comboBox_precision.SelectedIndex];
            int outputResolution = outputResolutionList[comboBox_outputResolution.SelectedIndex];

            if (precision < 1)
            {
                MessageBox.Show("Precision must be at least 1.");
                return;
            }
            if (outputResolution < 1)
            {
                MessageBox.Show("Output resolution must be at least 1.");
                return;
            }

            //  Do the calculation
            ForecastModel model;
            try
            {
                model = new ForecastModel(csv, precision);
            }
            catch (ForecastParsingException exception)
            {
                MessageBox.Show("Forecast Parsing Exception: " + exception.Message);
                return;
            }
            catch (Exception exception)
            {
                MessageBox.Show("Failed to read source file: " + exception.Message);
                return;
            }
            ForecastItem reduced = model.reduce(precision, outputResolution);

            //  Create file name for outpu file
            string sourceFileName = Path.GetFileName(filePath);
            string sourceFileDirectory = Path.GetDirectoryName(filePath);
            string nameWithoutExt = sourceFileName.Substring(0, sourceFileName.IndexOf('.'));
            string outFile = sourceFileDirectory + @"\" + nameWithoutExt + "_forecast.csv";

            //  Generate output
            string[] formattedOutput = formatOutput(reduced);
            try
            {
                System.IO.File.WriteAllLines(outFile, formattedOutput);
            }
            catch (Exception exception)
            {
                MessageBox.Show("Failed to write output file: " + exception.Message);
                return;
            }

            MessageBox.Show("Generated output at " + outFile + ".");
            return;

        }

        static string[] formatOutput(ForecastItem reduced)
        {
            List<string> linesOut = new List<string>();

            linesOut.Add(",,");
            linesOut.Add("Generated by Forecast v" + versionString + " by Fabrizio Polo (c) Orbotix Inc 2013,,");
            linesOut.Add(",,");
            linesOut.Add("Max likelihood," + reduced.ValueAtPeakDensity + ",,");
            linesOut.Add("Mean," + reduced.Mean + ",,");
            linesOut.Add("50 Percentile," + reduced.getValueAtPercentile(50) + ",");
            linesOut.Add("75 Percentile," + reduced.getValueAtPercentile(75) + ",");
            linesOut.Add("90 Percentile," + reduced.getValueAtPercentile(90) + ",");
            linesOut.Add(",,");
            linesOut.Add("Percentile, Value, Density");

            double prevVal = 0.0; // reduced[0].Value;

            double totalProb = 0.0;
            
            for (int i=0; i < reduced.Count; ++i)
            {
                ModelAtom a = reduced[i];

                double density;
                if (i == 0 || a.Value - prevVal == 0)
                {
                    //  If there is no next value
                    if (i == reduced.Count - 1 || a.Value == reduced[i + 1].Value)
                    {
                        density = 0;
                    }
                    else
                    {
                        density = a.Prob / Math.Abs(a.Value - reduced[i + 1].Value);
                    }
                }
                else if (i == reduced.Count - 1 || a.Value == reduced[i+1].Value)
                {
                    density = a.Prob / Math.Abs(a.Value - prevVal);
                }
                else
                {
                    density = 0.5f * (a.Prob / Math.Abs(a.Value - prevVal)  + a.Prob / Math.Abs(a.Value - reduced[i + 1].Value));
                }
//                        density = a.Prob / Math.Abs(a.Value - prevVal);
//                double density2 = a.Prob / Math.Abs(

                totalProb += a.Prob;
                linesOut.Add("" + totalProb * 100 + "," + a.Value + "," + density);

                prevVal = a.Value;
            }

            return linesOut.ToArray();
        }

        static CSV readCsvFile(string fileName)
        {
            CSV csv = new CSV();
            using (CsvFileReader reader = new CsvFileReader(fileName))
            {

                CsvRow row = new CsvRow();
                while (reader.ReadRow(row))
                {
                    string[] newRow = new string[row.Count];
                    csv.Add(newRow);
                    int col = 0;

                    foreach (string s in row)
                    {
                        newRow[col] = s;
                        //Console.WriteLine (s);
                        col++;
                    }
                }
            }

            csv.makeRectangular();
            return csv;
        }
    
    }
}
